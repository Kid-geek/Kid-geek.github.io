<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[搭建Elasticsearch]]></title>
      <url>http://yoursite.com/2018/01/26/%E6%90%AD%E5%BB%BAElasticsearch/</url>
      <content type="html"><![CDATA[<ol>
<li>搭建JAVA环境  <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">地址</a></li>
<li>安装elasticsearch-rtf (国人制作安装好插件的elasticsearch)  <a href="https://github.com/medcl/elasticsearch-rtf" target="_blank" rel="external">地址</a><br>直接从github搜索,下完后解压即可  </li>
<li>在bin目录下直接用命令行运行<code>elasticsearch</code>即可,端口号<code>9200</code></li>
<li>搭建NodeJS环境 <a href="http://nodejs.cn/download/" target="_blank" rel="external">地址</a></li>
<li>安装head插件进行管理  <a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="external">地址</a><br>直接从github搜索,下完解压缩<br>先安装cnpm <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>然后 在head目录下命令行输入 <code>cnpm install</code>  <code>cnpm run start</code> 即可, 端口号<code>9100</code><br>6.安装kibana 在官网下载对应版本为 5.1.1 <a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="external">地址</a><br>下完后解压即可 在bin目录下直接用命令行运行<code>kibana.bat</code>即可 端口号<code>5601</code></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Elasticsearch </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linxu的文件权限和目录配置]]></title>
      <url>http://yoursite.com/2018/01/17/Linxu%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>读书笔记</p>
</blockquote>
<h1 id="Linux文件权限和目录配置"><a href="#Linux文件权限和目录配置" class="headerlink" title="Linux文件权限和目录配置"></a>Linux文件权限和目录配置</h1><h2 id="Linux文件属性"><a href="#Linux文件属性" class="headerlink" title="Linux文件属性"></a>Linux文件属性</h2><p><code>ls -l</code>命令查看详细内容<br><code>-rw-r--r--   1     root      root      1023      Sep  4  18:25  test.txt</code>  分别为<br>  [权限]     [连接] [所有者]  [用户组]  [文件容量]   [修 改 日 期]   [文件名]</p>
<p>权限: 第一个字符代表这个文件是”目录、文件或链接文件等”<br>· [d] : 目录<br>· [-] : 文件<br>· [i] : 连接文件<br>· [b] : 设备文件里面的可供存储的接口设备<br>· [c] : 表示设备文件里面的串行端口设备, 例如键盘鼠标等</p>
<h1 id="权限与命令间的关系"><a href="#权限与命令间的关系" class="headerlink" title="权限与命令间的关系"></a>权限与命令间的关系</h1><ol>
<li><p>让用户能进入某目录成为’可工作目录’的基本权限是什么<br>· 可使用的命令: 例如cd等切换工作目录的命令<br>· 目录所需权限: 用户对这个目录至少需要 x 的权限<br>· 额外需求: 如果用户想用ls查阅,则用户对此目录还需有 r 的权限</p>
</li>
<li><p>用户在某个目录内读取一个文件的基本权限是什么<br>· 可使用的命令: 例如 cat more less等<br>· 目录所需权限: 用户对这个目录至少需要具有 x 权限<br>· 文件所需权限: 用户对文件至少需要 r 的权限</p>
</li>
<li><p>让用户修改一个文件的基本权限是什么<br>· 可使用的命令: 例如 nano 或 vi 等<br>· 目录所需权限: 用户对这个目录至少需要具有 x 权限<br>· 文件所需权限: 用户对文件至少需要 r,w 的权限</p>
</li>
<li><p>让一个用户可以创建一个文件的基本权限是什么<br>· 目录所需权限: 用户在该目录至少具有 w x 的权限 重点在w</p>
</li>
<li><p>让用户进入某目录并执行该目录下某个命令的基本权限是什么<br>· 目录所需权限: 用户对这个目录至少需要具有 x 权限<br>· 文件所需权限: 用户对文件至少需要 x 的权限</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里云配置Anaconda]]></title>
      <url>http://yoursite.com/2018/01/16/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AEAnaconda/</url>
      <content type="html"><![CDATA[<h1 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h1><p><a href="https://www.anaconda.com/download" target="_blank" rel="external">官网下载Anaconda-Linux版本</a></p>
<ol>
<li><code>yum install bzip2</code>安装依赖  (很重要)</li>
<li><code>bash anaconda.sh</code> 安装Anaconda 一路回车之后选择yes yes yes</li>
<li><code>source ~/.bashrc</code> 激活命令</li>
<li><code>python</code>测试安装是否成功</li>
<li>手动添加PATH变量.<br><code>echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc</code></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里云配置Redis远程连接]]></title>
      <url>http://yoursite.com/2018/01/16/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AERedis%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为了配置Scrapy-redis分布式爬虫, 遇到超多坑, 记录一下</p>
<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p><code>yum -y install redis</code> 直接输入命令即可</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p><code>vim /etc/redis.conf</code></p>
<ol>
<li><code>bind 127.0.0.1</code>  代表指定Redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，在生产环境中最好设置该项。<br>如果需要远程连接  则注释掉该项即可</li>
<li><code>daemonize yes</code> 代表是否后台运行</li>
<li>在redis3.2之后，redis增加了protected-mode，在这个模式下，即使注释掉了bind 127.0.0.1，再访问redisd时候还是报错,解决办法:<br><code>protected-mode yes</code> 修改为  <code>protected-mode no</code></li>
<li><code>requirepass xxxx</code> xxxx代表连接Redis密码</li>
</ol>
</blockquote>
<h2 id="远程连接Reids"><a href="#远程连接Reids" class="headerlink" title="远程连接Reids"></a>远程连接Reids</h2><p><code>redis-cli -h ip -a password</code> Ip填写阿里云外网IP  密码填写密码即可</p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[同时运行多个Scrapy爬虫的方法]]></title>
      <url>http://yoursite.com/2018/01/12/%E5%90%8C%E6%97%B6%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AAScrapy%E7%88%AC%E8%99%AB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个项目有时有多个爬虫, 可以自定义项目名录达到一次运行多个爬虫的目的.<br><a id="more"></a></p>
</blockquote>
<p><code>scrapy list</code>可以查看当前项目下有几个爬虫</p>
<ol>
<li>创建<code>commands</code>目录<br>在项目根目录下创建<code>commands</code>目录</li>
<li><p>创建<code>crawlall.py</code>文件<br>代码如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.commands <span class="keyword">import</span> ScrapyCommand  </div><div class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</div><div class="line"><span class="keyword">from</span> scrapy.utils.conf <span class="keyword">import</span> arglist_to_dict</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(ScrapyCommand)</span>:</span></div><div class="line"></div><div class="line">    requires_project = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">syntax</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> <span class="string">'[options]'</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">short_desc</span><span class="params">(self)</span>:</span>  </div><div class="line">        <span class="keyword">return</span> <span class="string">'Runs all of the spiders'</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_options</span><span class="params">(self, parser)</span>:</span></div><div class="line">        ScrapyCommand.add_options(self, parser)</div><div class="line">        parser.add_option(<span class="string">"-a"</span>, dest=<span class="string">"spargs"</span>, action=<span class="string">"append"</span>, default=[], metavar=<span class="string">"NAME=VALUE"</span>,</div><div class="line">                          help=<span class="string">"set spider argument (may be repeated)"</span>)</div><div class="line">        parser.add_option(<span class="string">"-o"</span>, <span class="string">"--output"</span>, metavar=<span class="string">"FILE"</span>,</div><div class="line">                          help=<span class="string">"dump scraped items into FILE (use - for stdout)"</span>)</div><div class="line">        parser.add_option(<span class="string">"-t"</span>, <span class="string">"--output-format"</span>, metavar=<span class="string">"FORMAT"</span>,</div><div class="line">                          help=<span class="string">"format to use for dumping items with -o"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_options</span><span class="params">(self, args, opts)</span>:</span></div><div class="line">        ScrapyCommand.process_options(self, args, opts)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            opts.spargs = arglist_to_dict(opts.spargs)</div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">raise</span> UsageError(<span class="string">"Invalid -a value, use -a NAME=VALUE"</span>, print_help=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, args, opts)</span>:</span></div><div class="line">        <span class="comment">#settings = get_project_settings()</span></div><div class="line"></div><div class="line">        spider_loader = self.crawler_process.spider_loader</div><div class="line">        <span class="keyword">for</span> spidername <span class="keyword">in</span> args <span class="keyword">or</span> spider_loader.list():</div><div class="line">            <span class="keyword">print</span> <span class="string">"*********cralall spidername************"</span> + spidername</div><div class="line">            self.crawler_process.crawl(spidername, **opts.spargs)</div><div class="line"></div><div class="line">        self.crawler_process.start()</div></pre></td></tr></table></figure>
<p>这里主要是用了<code>self.crawler_process.spider_loader.list()</code>方法获取项目下所有的spider，然后利用<code>self.crawler_process.crawl</code>运行spider</p>
</li>
<li>创建<code>__init__.py</code>文件</li>
<li>在<code>settings.py</code>中添加配置:<code>COMMANDS_MODULE = &#39;cnblogs.commands&#39;</code></li>
<li>在命令行中输入<code>scrapy crawlall</code>即可</li>
</ol>
<p>参考自:<a href="http://www.cnblogs.com/rwxwsblog/p/4578764.html" target="_blank" rel="external">同时运行多个scrapy爬虫的几种方法（自定义scrapy项目命令）</a></p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy配置MySQL]]></title>
      <url>http://yoursite.com/2018/01/12/Scrapy%E9%85%8D%E7%BD%AEMySQL/</url>
      <content type="html"><![CDATA[<h1 id="配置Item导入MySQL"><a href="#配置Item导入MySQL" class="headerlink" title="配置Item导入MySQL"></a>配置Item导入MySQL</h1><h2 id="同步插入数据"><a href="#同步插入数据" class="headerlink" title="同步插入数据"></a>同步插入数据</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb.cursors</div><div class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</div><div class="line"></div><div class="line"><span class="comment"># 同步MYSQL</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></div><div class="line">        setting=get_project_settings()</div><div class="line">        db = setting.get(<span class="string">'MYSQL_DB_NAME'</span>, <span class="string">'lagou_scrapy'</span>)</div><div class="line">        host =  setting.get(<span class="string">'MYSQL_HOST'</span>, <span class="string">'localhost'</span>)</div><div class="line">        port =  setting.get(<span class="string">'MYSQL_PORT'</span>, <span class="number">3306</span>)</div><div class="line">        user =  setting.get(<span class="string">'MYSQL_USER'</span>, <span class="string">'root'</span>)</div><div class="line">        passwd =  setting.get(<span class="string">'MYSQL_PASSWORD'</span>, <span class="string">'123456'</span>)</div><div class="line"></div><div class="line">        self.db_conn=MySQLdb.connect(host=host,port=port,db=db,user=user,passwd=passwd,charset=<span class="string">'utf8'</span>)</div><div class="line">        self.db_cur=self.db_conn.cursor()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></div><div class="line">        self.db_conn.commit()</div><div class="line">        self.db_conn.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self,item,spider)</span>:</span></div><div class="line">        self.insert_db(item)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(self,itme)</span>:</span></div><div class="line">        values=(itme[<span class="string">'positionName'</span>],</div><div class="line">                itme[<span class="string">'companyShortName'</span>],</div><div class="line">                itme[<span class="string">'salary'</span>],</div><div class="line">                itme[<span class="string">'positionAdvantage'</span>],</div><div class="line">        )</div><div class="line">        sql=<span class="string">'INSERT INTO java_beijing (positionName, companyShortName, salary, positionAdvantage) VALUES ("%s", "%s", "%s", "%s")'</span></div><div class="line">        self.db_cur.execute(sql,values)</div></pre></td></tr></table></figure>
<h2 id="异步插入数据"><a href="#异步插入数据" class="headerlink" title="异步插入数据"></a>异步插入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</div><div class="line"><span class="keyword">import</span> MySQLdb.cursors</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</div><div class="line"></div><div class="line"><span class="comment"># 异步 MYSQL</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLAsyncPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        setting=get_project_settings()</div><div class="line">        db = setting.get(<span class="string">'MYSQL_DB_NAME'</span>, <span class="string">'lagou_scrapy'</span>)</div><div class="line">        host = setting.get(<span class="string">'MYSQL_HOST'</span>, <span class="string">'localhost'</span>)</div><div class="line">        port = setting.get(<span class="string">'MYSQL_PORT'</span>, <span class="number">3306</span>)</div><div class="line">        user = setting.get(<span class="string">'MYSQL_USER'</span>, <span class="string">'root'</span>)</div><div class="line">        passwd = setting.get(<span class="string">'MYSQL_PASSWORD'</span>, <span class="string">'123456'</span>)</div><div class="line"></div><div class="line">        self.dbpool=adbapi.ConnectionPool(<span class="string">'MySQLdb'</span>,host=host,db=db,user=user,passwd=passwd,charset=<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></div><div class="line">        self.dbpool.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self,item,spider)</span>:</span></div><div class="line">        self.dbpool.runInteraction(self.insert_db,item)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(self,tx,itme)</span>:</span></div><div class="line">        values=(itme[<span class="string">'positionName'</span>],</div><div class="line">                itme[<span class="string">'companyShortName'</span>],</div><div class="line">                itme[<span class="string">'salary'</span>],</div><div class="line">                itme[<span class="string">'industryField'</span>],</div><div class="line">                itme[<span class="string">'positionAdvantage'</span>],</div><div class="line">                itme[<span class="string">'workYear'</span>],</div><div class="line">                itme[<span class="string">'education'</span>],</div><div class="line">                itme[<span class="string">'jobNature'</span>],</div><div class="line">                itme[<span class="string">'positionId'</span>],</div><div class="line">                itme[<span class="string">'createTime'</span>],</div><div class="line">                itme[<span class="string">'city'</span>],</div><div class="line">                itme[<span class="string">'district'</span>],</div><div class="line">                itme[<span class="string">'companyFullName'</span>],</div><div class="line">                itme[<span class="string">'financeStage'</span>],</div><div class="line">                itme[<span class="string">'companySize'</span>],</div><div class="line">                itme[<span class="string">'info'</span>]</div><div class="line">        )</div><div class="line">        sql=<span class="string">'INSERT IGNORE INTO java_beijing (positionName, companyShortName, salary, industryField, positionAdvantage, workYear, education, jobNature, positionId, createTime, city, district, companyFullName, financeStage, companySize, info) VALUES ("%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s")'</span></div><div class="line">        tx.execute(sql,values)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Python发送邮件]]></title>
      <url>http://yoursite.com/2018/01/12/Python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>考虑到后期可以做自动发送邮件提醒, 记录一下Python发送邮件</p>
</blockquote>
<p>开启QQ邮箱的设置-账户里SMTP服务,会得到一个授权码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"></div><div class="line">msg_from = <span class="string">'280705132@qq.com'</span>  <span class="comment"># 发送方邮箱</span></div><div class="line">passwd = <span class="string">'  '</span>  <span class="comment"># 填入发送方邮箱的授权码</span></div><div class="line">msg_to = <span class="string">'280705132@qq.com'</span>  <span class="comment"># 收件人邮箱</span></div><div class="line"></div><div class="line">subject = <span class="string">"python邮件测试"</span>  <span class="comment"># 主题</span></div><div class="line">content = <span class="string">"这是我使用python smtplib及email模块发送的邮件"</span></div><div class="line">msg = MIMEText(content)</div><div class="line">msg[<span class="string">'Subject'</span>] = subject</div><div class="line">msg[<span class="string">'From'</span>] = msg_from</div><div class="line">msg[<span class="string">'To'</span>] = msg_to</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    s = smtplib.SMTP_SSL(<span class="string">"smtp.qq.com"</span>, <span class="number">465</span>)</div><div class="line">    s.login(msg_from, passwd)</div><div class="line">    s.sendmail(msg_from, msg_to, msg.as_string())</div><div class="line">    print(<span class="string">"发送成功"</span>)</div><div class="line"><span class="keyword">except</span> smtplib.SMTPException:</div><div class="line">    print(<span class="string">"发送失败"</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy拉勾]]></title>
      <url>http://yoursite.com/2018/01/12/Scrapy%E6%8B%89%E5%8B%BE/</url>
      <content type="html"><![CDATA[<h1 id="爬取拉勾网招聘信息"><a href="#爬取拉勾网招聘信息" class="headerlink" title="爬取拉勾网招聘信息"></a>爬取拉勾网招聘信息</h1><h2 id="抓列表"><a href="#抓列表" class="headerlink" title="抓列表"></a>抓列表</h2><p>后台查看到内容是AJAX生成的,并且POST不同URL获取到不同内容,  但表单参数只作为控制页码使用.<br><a id="more"></a><br>参数:<br><code>fd = {&#39;first&#39;: &#39;false&#39;,
        &#39;pn&#39;: 1,  
        &#39;kd&#39;: &#39;java&#39;}</code><br>其中  pn控制页码  拉勾写死在最多显示30页内容  每页15条<br>      kd控制职位关键字  输入要搜索的职位名称即可</p>
<p>POST URL规则如下:</p>
<blockquote>
<p>px  排序方式: new  最新  default   默认<br>gx  工作性质: 全职   实习<br>gj  工作经验: 不限 应届毕业生 3年及以下 3-5年 5-10年 10年以上 不要求<br>city  城市:  北京</p>
</blockquote>
<p>例如:用此规则构建  工作经验:3年及以下   排序方式: 最新   城市: 北京<br>得到URL:<code>https://www.lagou.com/jobs/positionAjax.json?gj=3年及以下&amp;px=new&amp;city=北京&amp;needAddtionalResult=false&amp;isSchoolJob=0</code></p>
<p>构造完URL后, POST请求后得到JSON格式字符串, 转换为字典格式解析即可, 根据自己需求保存信息<br>其中注意 <code>positionId</code>参数  为职位ID,  根据此ID构造职位详情URL</p>
<p>注1: 在POST请求时  反爬验证为Referer  设置头为    <code>&#39;Referer&#39;:&#39;https://www.lagou.com/jobs/list_java?px=new&amp;city=%E5%8C%97%E4%BA%AC&#39;</code><br>注2: 当工作经验为应届毕业生时,URL特为<code>https://www.lagou.com/jobs/positionAjax.json?px=default&amp;gx=全职&amp;city=北京&amp;needAddtionalResult=false&amp;isSchoolJob=1</code></p>
<h2 id="抓详情"><a href="#抓详情" class="headerlink" title="抓详情"></a>抓详情</h2><p>通过<code>positionId</code>参数,构造详情URL:<code>https://www.lagou.com/jobs/+ positionId</code><br>然后GET请求此参数即可.</p>
<p>注: 当大规模抓取时, 速度过快会导致IP被查到, 结果为 302请求跳转到登录页面.  通过Google解决办法<br>在 <code>spider.py</code>文件中 添加默认请求头即可.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">custom_settings = &#123;</div><div class="line">        <span class="string">"COOKIES_ENABLED"</span>: <span class="keyword">False</span>,</div><div class="line">        <span class="comment"># "DOWNLOAD_DELAY": 1,</span></div><div class="line">        <span class="string">'DEFAULT_REQUEST_HEADERS'</span>: &#123;</div><div class="line">            <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</div><div class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</div><div class="line">            <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">            <span class="string">'Cookie'</span>: <span class="string">'user_trace_token=20171015132411-12af3b52-3a51-466f-bfae-a98fc96b4f90; LGUID=20171015132412-13eaf40f-b169-11e7-960b-525400f775ce; SEARCH_ID=070e82cdbbc04cc8b97710c2c0159ce1; ab_test_random_num=0; X_HTTP_TOKEN=d1cf855aacf760c3965ee017e0d3eb96; showExpriedIndex=1; showExpriedCompanyHome=1; showExpriedMyPublish=1; hasDeliver=0; PRE_UTM=; PRE_HOST=www.baidu.com; PRE_SITE=https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DsXIrWUxpNGLE2g_bKzlUCXPTRJMHxfCs6L20RqgCpUq%26wd%3D%26eqid%3Dee53adaf00026e940000000559e354cc; PRE_LAND=https%3A%2F%2Fwww.lagou.com%2F; index_location_city=%E5%85%A8%E5%9B%BD; TG-TRACK-CODE=index_hotjob; login=false; unick=""; _putrc=""; JSESSIONID=ABAAABAAAFCAAEG50060B788C4EED616EB9D1BF30380575; _gat=1; _ga=GA1.2.471681568.1508045060; LGSID=20171015203008-94e1afa5-b1a4-11e7-9788-525400f775ce; LGRID=20171015204552-c792b887-b1a6-11e7-9788-525400f775ce'</span>,</div><div class="line">            <span class="string">'Host'</span>: <span class="string">'www.lagou.com'</span>,</div><div class="line">            <span class="string">'Origin'</span>: <span class="string">'https://www.lagou.com'</span>,</div><div class="line">            <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/'</span>,</div><div class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>ps: 迷之成功, 测试了好多遍用类似的参数都不行, 只能用这个办法了.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[XPath简单语法]]></title>
      <url>http://yoursite.com/2018/01/11/XPath%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="简单记记"><a href="#简单记记" class="headerlink" title="简单记记"></a>简单记记</h3><ol>
<li>获取div<br><code>//div</code></li>
<li>获取指定属性 div<br><code>//div[@class=&quot;top&quot;]</code></li>
<li>获取div属性中的文本<br><code>//div/text()</code></li>
<li>获取div的指定属性<br><code>//div/@class</code></li>
<li>获取div标签下所有文本<br><code>string(//div)</code></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy配置文件Setting理解]]></title>
      <url>http://yoursite.com/2018/01/04/Scrapy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6Setting%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="Setting-py-选项理解"><a href="#Setting-py-选项理解" class="headerlink" title="Setting.py 选项理解"></a>Setting.py 选项理解</h1><a id="more"></a>
<h2 id="并发数控制"><a href="#并发数控制" class="headerlink" title="并发数控制"></a>并发数控制</h2><blockquote>
<p>并发是指同时处理的request的数量。其有全局限制和局部(每个网站)的限制。<br>Scrapy默认的全局并发限制对同时爬取大量网站的情况并不适用，因此您需要增加这个值。 增加多少取决于您的爬虫能占用多少CPU。 一般开始可以设置为 100 。不过最好的方式是做一些测试，获得Scrapy进程占取CPU与并发数的关系。 为了优化性能，您应该选择一个能使CPU占用率在80%-90%的并发数<br><strong><code>CONCURRENT_REQUESTS = 100，scrapy中默认的并发数是32</code></strong></p>
</blockquote>
<h2 id="默认每个域名的并发数：8"><a href="#默认每个域名的并发数：8" class="headerlink" title="默认每个域名的并发数：8"></a>默认每个域名的并发数：8</h2><blockquote>
<p><strong><code>CONCURRENT_REQUESTS_PER_DOMAIN = 8</code></strong></p>
</blockquote>
<h2 id="每个IP的最大并发数：0表示忽略"><a href="#每个IP的最大并发数：0表示忽略" class="headerlink" title="每个IP的最大并发数：0表示忽略"></a>每个IP的最大并发数：0表示忽略</h2><blockquote>
<p><strong><code>CONCURRENT_REQUESTS_PER_IP = 0</code></strong></p>
</blockquote>
<h2 id="减少下载超时"><a href="#减少下载超时" class="headerlink" title="减少下载超时"></a>减少下载超时</h2><blockquote>
<p>如果您对一个非常慢的连接进行爬取(一般对通用爬虫来说并不重要)， 减小下载超时能让卡住的连接能被快速的放弃并解放处理其他站点的能力。<br><strong><code>DOWNLOAD_TIMEOUT = 15,其中15是设置的下载超时时间</code></strong></p>
</blockquote>
<h2 id="配置ITEM处理"><a href="#配置ITEM处理" class="headerlink" title="配置ITEM处理"></a>配置ITEM处理</h2><blockquote>
<p><strong><code>ITEM_PIPELINES = {
    &#39;lagou.pipemysql.MySQLAsyncPipeline&#39;: 401   #数字代表优先级
}</code></strong></p>
</blockquote>
<h2 id="配置MIDDLEWARES"><a href="#配置MIDDLEWARES" class="headerlink" title="配置MIDDLEWARES"></a>配置MIDDLEWARES</h2><blockquote>
<p><strong><code>DOWNLOADER_MIDDLEWARES = {
   &#39;lagou.middlewares.ProxyMiddleware&#39;: 543,
}</code></strong></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2018]]></title>
      <url>http://yoursite.com/2018/01/02/2018/</url>
      <content type="html"><![CDATA[<h3 id="小小规划下2018-假装假装"><a href="#小小规划下2018-假装假装" class="headerlink" title="小小规划下2018(假装假装)"></a>小小规划下2018(假装假装)</h3><h4 id="First"><a href="#First" class="headerlink" title="First"></a>First</h4><p>稳定工作  爬虫向  互联网金融 10K+</p>
<h4 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h4><p>攒钱 3000 * 12 + 7000 = 4W+</p>
<h4 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h4><p>技能树(不分先后):  </p>
<ol>
<li>Scrapy精通  </li>
<li>数据挖掘+机器学习入门</li>
<li>数据结构重刷</li>
<li>MySQL精通  </li>
<li>分布式精通 (CSDN视频)</li>
<li>Linux熟练使用 (鸟哥私房菜)</li>
<li>Python基础</li>
</ol>
<h4 id="愿望清单"><a href="#愿望清单" class="headerlink" title="愿望清单:"></a>愿望清单:</h4><ol>
<li>微单 4K</li>
<li>显示器 2K</li>
<li>PS4 2K</li>
<li>内存条 0.5K</li>
</ol>
<p>尾巴: 算了算了</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy框架流程图]]></title>
      <url>http://yoursite.com/2017/12/16/Scrapy%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>方便理解整个Scrapy运行流程 画个图</p>
<p><img src="/images/Scrapy框架流程图.png" alt="“Scrapy框架流程图”"></p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[时间戳转换]]></title>
      <url>http://yoursite.com/2017/11/22/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>转自:<a href="http://blog.csdn.net/xiaobing_blog/article/details/12591917" target="_blank" rel="external">http://blog.csdn.net/xiaobing_blog/article/details/12591917</a></p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[requests下载pdf]]></title>
      <url>http://yoursite.com/2017/11/15/%E4%B8%8B%E8%BD%BDpdf/</url>
      <content type="html"><![CDATA[<p>requests下载pdf<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">response = requests.get(url,stream=&quot;TRUE&quot;)</div><div class="line">with open(&apos;C:\\Users\\jojo\\Desktop&apos;+file_name+&apos;.pdf&apos;, &apos;wb&apos;) as file:</div><div class="line">    for data in response.iter_content():</div><div class="line">        file.write(data)</div><div class="line">    file.close()</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL导出EXCLE文件]]></title>
      <url>http://yoursite.com/2017/10/07/MySQL%E5%AF%BC%E5%87%BAEXCLE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="MySQL导出EXCLE文件"><a href="#MySQL导出EXCLE文件" class="headerlink" title="MySQL导出EXCLE文件"></a>MySQL导出EXCLE文件</h1><p>一般用命令导出会遇到问题:<br><code>The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code><br>报错原因：<br>secure_file_priv设置了指定目录，需要在指定的目录下进行数据导出</p>
<p>Windows下my.ini所在路径:<code>C:\ProgramData\MySQL\MySQL Server 5.7</code></p>
<p><code>secure_file_priv</code>这个变量不支持动态修改，官方文档写明了，需要重启生效</p>
<p>命令:<br>导出文件<br><code>SELECT * FROM MY_TABLE INTO OUTFILE &#39;FILE_PATH&#39;;</code><br>导入文件<br><code>LOAD DATA INFILE &#39;FILE_PATH&#39; INTO TABLE MY_TABLE;</code></p>
<p>参考资料:</p>
<blockquote>
<p><a href="https://github.com/jaywcjlove/mysql-tutorial/blob/master/chapter2/2.5.md" target="_blank" rel="external">MySQL配置修改</a><br><a href="http://www.jianshu.com/p/0f10c218d6fc" target="_blank" rel="external">mysql导出导入文件问题整理</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[selenium设置chrome和phantomjs的请求头信息]]></title>
      <url>http://yoursite.com/2017/09/16/selenium%E8%AE%BE%E7%BD%AEchrome%E5%92%8Cphantomjs%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>一：selenium设置phantomjs请求头：<br>二：selenium设置chrome请求头：<br>三：selenium设置chrome–cookie：<br>四：selenium设置phantomjs-图片不加载：<br><a id="more"></a></p>
<h2 id="selenium设置phantomjs请求头："><a href="#selenium设置phantomjs请求头：" class="headerlink" title="selenium设置phantomjs请求头："></a>selenium设置phantomjs请求头：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</div><div class="line"></div><div class="line">dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line">dcap[&quot;phantomjs.page.settings.userAgent&quot;] = (</div><div class="line">&quot;Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.23 Mobile Safari/537.36&quot;</div><div class="line">)</div><div class="line">driver = webdriver.PhantomJS(desired_capabilities=dcap)</div><div class="line">driver.get(&quot;https://httpbin.org/get?show_env=1&quot;)</div><div class="line">driver.get_screenshot_as_file(&apos;01.png&apos;)</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<h2 id="selenium设置chrome请求头："><a href="#selenium设置chrome请求头：" class="headerlink" title="selenium设置chrome请求头："></a>selenium设置chrome请求头：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"># 进入浏览器设置</div><div class="line">options = webdriver.ChromeOptions()</div><div class="line"># 设置中文</div><div class="line">options.add_argument(&apos;lang=zh_CN.UTF-8&apos;)</div><div class="line"># 更换头部</div><div class="line">options.add_argument(&apos;user-agent=&quot;Mozilla/5.0 (iPod; U; CPU iPhone OS 2_1 like Mac OS X; ja-jp) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.1 Mobile/5F137 Safari/525.20&quot;&apos;)</div><div class="line">browser = webdriver.Chrome(chrome_options=options)</div><div class="line">url = &quot;https://httpbin.org/get?show_env=1&quot;</div><div class="line">browser.get(url)</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<h2 id="selenium设置chrome–cookie："><a href="#selenium设置chrome–cookie：" class="headerlink" title="selenium设置chrome–cookie："></a>selenium设置chrome–cookie：</h2><p>cookie用于模拟登陆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">browser = webdriver.Chrome()</div><div class="line"></div><div class="line">url = &quot;https://www.baidu.com/&quot;</div><div class="line">browser.get(url)</div><div class="line"># 通过js新打开一个窗口</div><div class="line">newwindow=&apos;window.open(&quot;https://www.baidu.com&quot;);&apos;</div><div class="line"># 删除原来的cookie</div><div class="line">browser.delete_all_cookies()</div><div class="line"># 携带cookie打开</div><div class="line">browser.add_cookie(&#123;&apos;name&apos;:&apos;ABC&apos;,&apos;value&apos;:&apos;DEF&apos;&#125;)</div><div class="line"># 通过js新打开一个窗口</div><div class="line">browser.execute_script(newwindow)</div><div class="line">input(&quot;查看效果&quot;)</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<h2 id="selenium设置phantomjs-图片不加载："><a href="#selenium设置phantomjs-图片不加载：" class="headerlink" title="selenium设置phantomjs-图片不加载："></a>selenium设置phantomjs-图片不加载：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">options = webdriver.ChromeOptions()</div><div class="line">prefs = &#123;</div><div class="line">    &apos;profile.default_content_setting_values&apos;: &#123;</div><div class="line">        &apos;images&apos;: 2</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">options.add_experimental_option(&apos;prefs&apos;, prefs)</div><div class="line">browser = webdriver.Chrome(chrome_options=options)</div><div class="line"></div><div class="line"># browser = webdriver.Chrome()</div><div class="line">url = &quot;http://image.baidu.com/&quot;</div><div class="line">browser.get(url)</div><div class="line">input(&quot;是否有图&quot;)</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<p>转载自URl-team</p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Beautiful Soup]]></title>
      <url>http://yoursite.com/2017/09/14/Beautiful-Soup/</url>
      <content type="html"><![CDATA[<p>Beautiful Soup4是Python的一个第三方库，用来从HTML和XML中提取数据。Beautiful Soup4在某些方面比Xpath易懂，但是不如Xpath简洁，而且由于它是使用Python开发的，因此速度比Xpath慢。<br><a id="more"></a></p>
<h1 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h1><p>解析源代码,用lxml解析器<code>soup = BeautifulSoup(source, &#39;lxml&#39;)</code></p>
<h2 id="查找内容"><a href="#查找内容" class="headerlink" title="查找内容"></a>查找内容</h2><p>查找内容的方法和使用XPath非常相似。首先找的包含特殊属性值的标签，并使用这个标签来寻找内容。 查找到有用的内容，然后在这个内容的基础上，继续查找下面的内容。<br><code>find_all</code> 与<code>find</code>的不同在于，<code>find_all</code>返回的是列表，如果没有找到，就会返回空列表。而<code>find</code>返回的直接是一个BeautifulSoup Tag对象，如果有多个符合条件的BeautifulSoup Tag对象，则返回第一个对象，如果找不到，就会返回None。</p>
<p><code>find_all( name , attrs , recursive , text , **kwargs )</code></p>
<ol>
<li><code>name</code>就是HTML的标签名，类似于body, div, ul, li之类。</li>
<li><code>attrs</code>参数的值是一个字典，字典的key是属性名，字典的value是属性值：<br><code>find_all(attrs={&#39;class&#39;: &#39;useful&#39;})</code></li>
<li><code>recursive</code>的值为True或者False，当它为False的时候，Beautiful Soup不会搜索子节点。</li>
<li><code>text</code>可以是一个字符串或者是正则表达式。用于搜索标签里面的文本信息：<br><code>find_all(text=re.compile(&#39;我需要&#39;))</code></li>
<li><code>**kwargs</code>表示key=value形式的参数。一般这里的key是属性，value是属性值。这个大多数情况下与标签配合使用，但是有时候如果属性值非常特殊，也可以单独使用：<br><code>find_all(&#39;div&#39;, id=&#39;test&#39;)
find_all(class_=&#39;iamstrange&#39;)</code></li>
</ol>
<h1 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h1><p>用笔趣看网站搜索页面做范例  <a href="http://zhannei.baidu.com/cse/search?ie=gbk&amp;s=2758772450457967865&amp;q=%D2%BB%C4%EE%D3%C0%BA%E3" target="_blank" rel="external">一念永恒搜索</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">from bs4 import BeautifulSoup</div><div class="line">import requests</div><div class="line">url=&apos;http://zhannei.baidu.com/cse/search?ie=gbk&amp;s=2758772450457967865&amp;q=%D2%BB%C4%EE%D3%C0%BA%E3&apos;</div><div class="line">source=requests.get(url).content.decode()</div><div class="line"># 解析源代码</div><div class="line">soup = BeautifulSoup(source, &apos;lxml&apos;)</div><div class="line"># 解析出小说信息,得到的是一个列表</div><div class="line">divs=soup.find_all(&apos;div&apos;,class_=&apos;result-item result-game-item&apos;)</div><div class="line"># 遍历列表项,继续获取其他详细信息</div><div class="line">for div in divs:</div><div class="line">    div_soup=BeautifulSoup(str(div),&apos;lxml&apos;)</div><div class="line">    # 获取 class 为特定值的 a 标签  [属性内容]</div><div class="line">    name=div_soup.find(name=&apos;a&apos;,class_=&apos;result-game-item-title-link&apos;)[&apos;title&apos;]</div><div class="line">    print(&apos;小说名称:&apos;+name)</div><div class="line"></div><div class="line">    # 结尾加 .text表示获取其中文字</div><div class="line">    info=div_soup.find(name=&apos;p&apos;,class_=&apos;result-game-item-desc&apos;).text</div><div class="line">    print(&apos;简介:&apos;+info)</div><div class="line"></div><div class="line">    auth=div_soup.find(name=&apos;p&apos;,class_=&apos;result-game-item-info-tag&apos;).text</div><div class="line">    # 用replace方法可以出去空格或换行符</div><div class="line">    auth=auth.replace(&apos; &apos;,&apos;&apos;).replace(&apos;\r&apos;,&apos; &apos;)</div><div class="line">    print(auth)</div><div class="line"></div><div class="line">print(&apos;----------------------------&apos;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[登录后下载图片]]></title>
      <url>http://yoursite.com/2017/09/02/%E7%99%BB%E5%BD%95%E5%90%8E%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>竟然有丧心病狂的网站连图片都要登录之后才能下载…<br>记录下:</p>
<ol>
<li>post模拟登录</li>
<li>response获取getEntity()</li>
<li>entity.getEntity() 转换成inputstream流</li>
<li>写入图片<br>代码:<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class Test_downhttp &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class="line">		HttpPost httpPost = new HttpPost(&quot;http://dzb.csxww.com/json/login.action&quot;);</div><div class="line">		List&lt;NameValuePair&gt; valuePairs = new LinkedList&lt;NameValuePair&gt;();</div><div class="line">		valuePairs.add(new BasicNameValuePair(&quot;username&quot;, &quot;******&quot;));</div><div class="line">		valuePairs.add(new BasicNameValuePair(&quot;password&quot;, &quot;******&quot;));</div><div class="line">		// 向对方服务器发送Post请求</div><div class="line">		// 将参数进行封装，提交到服务器端</div><div class="line">		UrlEncodedFormEntity entity = new UrlEncodedFormEntity(valuePairs, Consts.UTF_8);</div><div class="line">		httpPost.setEntity(entity);</div><div class="line"></div><div class="line">		HttpGet httpget = new HttpGet(&quot;http://dzb.csxww.com/articlepic.action?dgId=1178765179&amp;pageId=37&amp;type=article&quot;);</div><div class="line">		try &#123;</div><div class="line">			httpclient.execute(httpPost);</div><div class="line">			CloseableHttpResponse response = httpclient.execute(httpget);</div><div class="line"></div><div class="line">			HttpEntity entitty = response.getEntity();</div><div class="line">			//写入图片</div><div class="line">			InputStream in = entitty.getContent();</div><div class="line">			FileOutputStream fileOutputStream = null;</div><div class="line">			byte[] data = new byte[1024];</div><div class="line">			int len = 0;</div><div class="line">			fileOutputStream = new FileOutputStream(&quot;E:\\test1.png&quot;);</div><div class="line">			while ((len = in.read(data)) != -1) &#123;</div><div class="line">				fileOutputStream.write(data, 0, len);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; catch (ClientProtocolException e) &#123;</div><div class="line">			// TODO 自动生成的 catch 块</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			// TODO 自动生成的 catch 块</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; // 登录</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[笔趣看小说下载(python)]]></title>
      <url>http://yoursite.com/2017/08/30/%E7%AC%94%E8%B6%A3%E7%9C%8B%E5%B0%8F%E8%AF%B4%E4%B8%8B%E8%BD%BD-python/</url>
      <content type="html"><![CDATA[<p>笔趣看网站只支持阅读不支持下载,通过python抓取页面链接,做到下载小说的功能</p>
<h3 id="拼接链接"><a href="#拼接链接" class="headerlink" title="拼接链接"></a>拼接链接</h3><p><code>search_url = r&#39;http://zhannei.baidu.com/cse/search?q=&#39; + book_name + &#39;&amp;click=1&amp;s=2758772450457967865&amp;nsid=&#39;</code><br>其中book_name为在控制台输入的书名<br>因为url中不能出现中文,所以要先编码一次.编码方法:</p>
<ol>
<li>先导入quote<code>from urllib.parse import quote</code></li>
<li><code>search_url = quote(search_url, safe = string.printable)</code> <code>string.printable</code> safe表示可以忽略的字符<a id="more"></a>
<h3 id="抓取搜索页第一项搜索结果"><a href="#抓取搜索页第一项搜索结果" class="headerlink" title="抓取搜索页第一项搜索结果"></a>抓取搜索页第一项搜索结果</h3></li>
<li><p>设置头</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head = &#123;&#125;</div><div class="line">head[&apos;User-Agent&apos;] = &apos;Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>读取网页数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">req = request.Request(search_url, headers=head)</div><div class="line">res = request.urlopen(req)</div><div class="line">html = res.read().decode(&apos;utf-8&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>用BeautifulSoup解析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">book_name_soup = BeautifulSoup(html, &apos;lxml&apos;)</div><div class="line">div = book_name_soup.find_all(&apos;div&apos;,class_=&apos;game-legend-a&apos;)</div><div class="line">a_soup = BeautifulSoup(str(div), &apos;lxml&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>用正则匹配出小说链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">regex = r&quot;location=&apos;([\s\S]*?)&apos;\&quot;&quot;</div><div class="line">matches=re.search(regex,str(a_soup))</div><div class="line"># 书本链接为第一个搜索结果</div><div class="line">a_href=matches.group(1)</div></pre></td></tr></table></figure>
</li>
<li><p>读取链接内容,解析出所有章节url并把内容写入TXT</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">def downTXT(book_name):</div><div class="line"></div><div class="line">    bookList_url = selectBook(book_name)</div><div class="line">    file = open(book_name + &apos;.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)</div><div class="line">    head = &#123;&#125;</div><div class="line">    head[</div><div class="line">        &apos;User-Agent&apos;] = &apos;Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19&apos;</div><div class="line">    target_req=request.Request(bookList_url,headers=head)</div><div class="line">    target_res=request.urlopen(target_req)</div><div class="line">    target_html=target_res.read().decode(&apos;gbk&apos;)</div><div class="line">    listmain_soup=BeautifulSoup(target_html,&apos;lxml&apos;)</div><div class="line">    chapters=listmain_soup.find_all(&apos;div&apos;,class_=&apos;listmain&apos;)</div><div class="line">    zhengwen_soup=BeautifulSoup(str(chapters),&apos;lxml&apos;)</div><div class="line">    zhengwen_flag=False</div><div class="line">    index=1</div><div class="line">    numbers=(len(zhengwen_soup.dl.contents)-1)/2</div><div class="line">    for child in zhengwen_soup.dl.children:</div><div class="line">        if child!=&apos;\n&apos;:</div><div class="line">            if child.string==r&apos;《&apos;+book_name+&apos;》正文卷&apos;:</div><div class="line">                zhengwen_flag=True</div><div class="line">            if zhengwen_flag==True and child.a!=None:</div><div class="line">                download_url=&apos;http://www.biqukan.com/&apos;+child.a.get(&apos;href&apos;)</div><div class="line">                download_req=request.Request(download_url,headers=head)</div><div class="line">                download_res=request.urlopen(download_req)</div><div class="line">                download_html=download_res.read().decode(&apos;gbk&apos;,&apos;ignore&apos;)</div><div class="line">                download_name=child.string</div><div class="line">                texts_soup=BeautifulSoup(download_html,&apos;lxml&apos;)</div><div class="line">                texts=texts_soup.find_all(id=&apos;content&apos;,class_=&apos;showtxt&apos;)</div><div class="line">                text_soup=BeautifulSoup(str(texts),&apos;lxml&apos;)</div><div class="line">                write_flag=True</div><div class="line">                file.write(download_name+&apos;\n\n&apos;)</div><div class="line">                for each in text_soup.div.text.replace(&apos;\xa0&apos;,&apos;&apos;):</div><div class="line">                    if each==&apos;h&apos;:</div><div class="line">                        write_flag=False</div><div class="line">                    if write_flag==True and each!=&apos; &apos;:</div><div class="line">                        file.write(each)</div><div class="line">                    if write_flag==True and each==&apos;\r&apos;:</div><div class="line">                        file.write(&apos;\n&apos;)</div><div class="line">                file.write(&apos;\n\n&apos;)</div><div class="line">                print(&quot;已下载:&quot; + str((index / numbers) * 100) + &apos;\r&apos;)</div><div class="line">                index += 1</div><div class="line">    file.close()</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="https://github.com/Kid-geek/PythonCrawer/blob/master/BiQuDownload/SelectBookDownload.py" target="_blank" rel="external">Github源码</a></p>
]]></content>
      
        <categories>
            
            <category> Python3爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[抓取天猫价格]]></title>
      <url>http://yoursite.com/2017/08/16/%E6%8A%93%E5%8F%96%E5%A4%A9%E7%8C%AB%E4%BB%B7%E6%A0%BC/</url>
      <content type="html"><![CDATA[<p>天猫商品详情页是用Ajax动态加载的</p>
<ol>
<li>先后台抓取url请求链接</li>
<li>添加referer得到实体</li>
<li><p>最后解析JSon即可</p>
<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.apache.http.client.ClientProtocolException;</div><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.impl.client.HttpClients;</div><div class="line">import org.apache.http.util.EntityUtils;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON;</div><div class="line">import com.alibaba.fastjson.JSONArray;</div><div class="line">import com.alibaba.fastjson.JSONObject;</div><div class="line"></div><div class="line">public class TmailGoodsInfo &#123;</div><div class="line">	public static void main(String[] args) throws ClientProtocolException, IOException &#123;</div><div class="line">		String url = &quot;https://mdskip.taobao.com/core/initItemDetail.htm?isForbidBuyItem=false&amp;cartEnable=true&amp;itemId=549004787468&amp;isPurchaseMallPage=false&amp;offlineShop=false&amp;queryMemberRight=true&amp;isSecKill=false&amp;sellerPreview=false&amp;cachedTimestamp=1502846997903&amp;tmallBuySupport=true&amp;isApparel=false&amp;addressLevel=2&amp;service3C=false&amp;showShopProm=false&amp;isUseInventoryCenter=false&amp;isRegionLevel=false&amp;isAreaSell=false&amp;tryBeforeBuy=false&amp;household=false&amp;callback=setMdskip&amp;timestamp=1502848785256&amp;isg=null&amp;isg2=AgkJZHnWtCmLwUg0MZ3S7hxgDTXPRK_NbEaJ26t86vBw8isE86JLWVliQGEq&quot;;</div><div class="line">		String referer = &quot;https://detail.tmall.com/item.htm?id=549004787468&amp;ali_refid=a3_430583_1006:1121371980:N:java:6628cce7b7279c82556f8802f07106ec&amp;ali_trackid=1_6628cce7b7279c82556f8802f07106ec&amp;spm=a230r.1.14.1.76bf523hqYFaJ&quot;;</div><div class="line"></div><div class="line">		CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class="line">		HttpGet httpGet = new HttpGet(url);</div><div class="line"></div><div class="line">		httpGet.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36&quot;</div><div class="line">				+ &quot; (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;);</div><div class="line"></div><div class="line">		// 添加referer</div><div class="line">		httpGet.setHeader(&quot;Referer&quot;, referer);</div><div class="line"></div><div class="line">		CloseableHttpResponse response = httpclient.execute(httpGet);</div><div class="line">		String entity = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);</div><div class="line">		entity = entity.substring(12, entity.length() - 1);</div><div class="line"></div><div class="line">		// 解析JSON</div><div class="line">		JSONObject object = JSON.parseObject(entity);</div><div class="line">		JSONObject object2 = (JSONObject) object.get(&quot;defaultModel&quot;);</div><div class="line">		JSONObject object3 = (JSONObject) object2.get(&quot;itemPriceResultDO&quot;);</div><div class="line">		JSONObject object4 = (JSONObject) object3.get(&quot;priceInfo&quot;);</div><div class="line">		JSONObject object5 = (JSONObject) object4.get(&quot;def&quot;);</div><div class="line">		JSONArray jsonArray = JSON.parseArray(object5.get(&quot;promotionList&quot;).toString());</div><div class="line">		//</div><div class="line"></div><div class="line">		System.out.println(object5);</div><div class="line">		if (jsonArray.size() == 1) &#123;</div><div class="line">			JSONObject object6 = (JSONObject) jsonArray.get(0);</div><div class="line">			System.out.println(&quot;实际售价为:&quot; + object6.get(&quot;price&quot;));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考自: <a href="http://blog.csdn.net/xu470438000/article/details/42391929" target="_blank" rel="external">java爬虫抓取天猫商品的价格数据</a></p>
]]></content>
      
        <categories>
            
            <category> Java爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读取XML内容]]></title>
      <url>http://yoursite.com/2017/08/15/%E8%AF%BB%E5%8F%96XML%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>很多时候需要为程序设置全局变量或者经常需要修改的量,这时候放到XML配置文件里就很有必要了</p>
</blockquote>
<p>需要用的的包  <code>dom4j</code> <a href="http://www.dom4j.org/dom4j-1.6.1/" target="_blank" rel="external">下载地址</a><br>代码如下<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import java.io.File;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.List;</div><div class="line">import org.dom4j.Document;</div><div class="line">import org.dom4j.Element;</div><div class="line">import org.dom4j.io.SAXReader;</div><div class="line"></div><div class="line">public class ReadXMLDemo &#123;</div><div class="line">	public static void main(String[] args) throws Exception &#123;</div><div class="line"></div><div class="line">		// 读取XML文件,获得document对象</div><div class="line">		SAXReader reader = new SAXReader();</div><div class="line">		Document document = reader.read(new File(&quot;src/test.xml&quot;));</div><div class="line"></div><div class="line">		// 取得节点对象</div><div class="line">		Element root = document.getRootElement();// 取得根节点</div><div class="line">		Element books = root.element(&quot;Books&quot;); // 取得该节点下 &quot;Books&quot; 子节点</div><div class="line">		Element book = books.element(&quot;Book&quot;);</div><div class="line">		System.out.println(book.getName() + book.getText()); // getName()获取该节点名字,getText()取得该节点内容</div><div class="line"></div><div class="line">		System.out.println(book.attribute(&quot;id&quot;).getText()); //book.attribute(&quot;id&quot;)获取该节点下属性为id的内容</div><div class="line">		</div><div class="line">		// 遍历子节点下所有元素</div><div class="line">		List&lt;Element&gt; bookList = book.elements();</div><div class="line">		for (Element element : bookList) &#123;</div><div class="line">			System.out.println(element.getName() + &quot; :&quot; + element.getText());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		//遍历子节点下子节点所有元素</div><div class="line">		for (Iterator it = books.elementIterator(); it.hasNext();) &#123;</div><div class="line">			Element element = (Element) it.next();</div><div class="line">			List&lt;Element&gt; booksList = element.elements();</div><div class="line">			for (Element element2 : booksList) &#123;</div><div class="line">				System.out.println(element2.getName() + &quot;: &quot; + element2.getText());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>XML文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;Info&gt;</div><div class="line">	&lt;Books&gt;</div><div class="line"> 		&lt;Book id=&quot;001&quot;&gt;</div><div class="line"> 			&lt;Name&gt;Java&lt;/Name&gt;</div><div class="line"> 			&lt;Price&gt;50.0&lt;/Price&gt;</div><div class="line"> 		&lt;/Book&gt;</div><div class="line"> 		</div><div class="line"> 		&lt;Book id=&quot;002&quot;&gt;</div><div class="line"> 			&lt;Name&gt;Python&lt;/Name&gt;</div><div class="line"> 			&lt;Price&gt;30.0&lt;/Price&gt;</div><div class="line"> 		&lt;/Book&gt;</div><div class="line"> 		</div><div class="line">	&lt;/Books&gt;</div><div class="line">	</div><div class="line">	&lt;Phones&gt;</div><div class="line">		&lt;Phone id=&quot;001&quot;&gt;</div><div class="line">			&lt;Name&gt;三星S8&lt;/Name&gt;</div><div class="line"> 			&lt;Price&gt;5588.0&lt;/Price&gt;</div><div class="line">		&lt;/Phone&gt;</div><div class="line">	&lt;/Phones&gt;</div><div class="line">	</div><div class="line">	</div><div class="line">&lt;/Info&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[eclipse常用快捷键]]></title>
      <url>http://yoursite.com/2017/08/14/eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>总结下常用快捷键吧,偶尔会忘<br><code>ALT + Shift + J</code> 文档注释<br><code>Ctr + Shift + R</code> 打开资源 (很好用)<br><code>Alt + Shift + R</code> 重命名 (很好用)<br><code>Ctr + Shift + O</code> 快速导入所有包 (很好用)<br><code>Ctr + Shift + F</code> 格式化代码<br><code>Alt + /</code> 代码提示<br><code>Ctr + 1</code> 错误修正建议<br><code>Ctr + D</code>  删除当前行<br><code>Ctr + /</code> 注释当前行,再按则取消注释</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[模拟登录(Post)]]></title>
      <url>http://yoursite.com/2017/08/11/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95(Post)/</url>
      <content type="html"><![CDATA[<p>用Cookie登录终究不是办法,总会过期的嘛.<br>终于遇到了用Post解决的时候,忙碌的一天…</p>
<p>网站:<a href="http://www.yqrb.cn/html/2017-08/10/node_62.htm" target="_blank" rel="external">乐清日报</a><br>以抓乐清日报为例.<br>工具:<strong>Fideler</strong><br>首先找到登录页面:<a href="http://www.yqrb.cn/check/UserLogin.aspx" target="_blank" rel="external">http://www.yqrb.cn/check/UserLogin.aspx</a><br>打开Fiddler准备抓数据.</p>
<ol>
<li>输入用户名密码点击确认</li>
<li>看到Fiddler页面<br><img src="/images/POST模拟.png" alt="“Post模拟”"><br>其中WebForms是发送出去的数据</li>
<li>开始写代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">package com.apabi.crawler;</div><div class="line">import org.apache.http.Consts;</div><div class="line">import org.apache.http.Header;</div><div class="line">import org.apache.http.NameValuePair;</div><div class="line">import org.apache.http.client.ClientProtocolException;</div><div class="line">import org.apache.http.client.config.CookieSpecs;</div><div class="line">import org.apache.http.client.config.RequestConfig;</div><div class="line">import org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.client.methods.HttpPost;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.impl.client.HttpClients;</div><div class="line">import org.apache.http.message.BasicNameValuePair;</div><div class="line">import org.apache.http.util.EntityUtils;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.LinkedList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class PostDemo &#123;</div><div class="line">	 public static void main(String[] args) throws ClientProtocolException, IOException&#123;</div><div class="line">		 //创建默认客户端</div><div class="line">		 CloseableHttpClient closeableHttpClient = HttpClients.createDefault();</div><div class="line"></div><div class="line"></div><div class="line">	        //创建Post请求实例</div><div class="line">	        HttpPost httpPost = new HttpPost(&quot;http://www.yqrb.cn/check/UserLogin.aspx&quot;);</div><div class="line"></div><div class="line">	        //创建参数列表</div><div class="line">	        List&lt;NameValuePair&gt; valuePairs = new LinkedList&lt;NameValuePair&gt;();</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;__VIEWSTATE&quot;, &quot;/wEPDwUKLTYyMjc0MTMwNWQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgIFEExvZ2luMSRDaGVja0JveDEFD0xvZ2luMSRpYnRMb2dpblgHoKZ58APGc4h5Aq8tcf+WuKlv&quot;));</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;Login1$txtUserName&quot;, &quot;aaaa&quot;));</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;Login1$txtUserPassWord&quot;, &quot;bbbb&quot;));</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;Login1$CheckBox1&quot;, &quot;on&quot;));</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;Login1$ibtLogin.x&quot;, &quot;0&quot;));</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;Login1$ibtLogin.y&quot;, &quot;0&quot;));</div><div class="line">	        valuePairs.add(new BasicNameValuePair(&quot;__EVENTVALIDATION&quot;, &quot;/wEWBQL2/JnoBQLGrKnLCQLZ3e7ECAKUkrPDCgKGkYz4DFU4WWL55rJshJkm7OKlQUqgsNqQ&quot;));</div><div class="line"></div><div class="line">	        //向对方服务器发送Post请求</div><div class="line">	            //将参数进行封装，提交到服务器端</div><div class="line"></div><div class="line">	        	UrlEncodedFormEntity entity = new UrlEncodedFormEntity(valuePairs, Consts.UTF_8);</div><div class="line"></div><div class="line">	        	httpPost.setEntity(entity);</div><div class="line">	        	closeableHttpClient.execute(httpPost);//登录</div><div class="line"></div><div class="line">	        	//登录成功之后就可以开始抓页面数据了</div><div class="line">	            HttpGet g = new HttpGet(&quot;http://www.yqrb.cn/html/2017-08/10/content_342754.htm&quot;);//获取“我关注的问题”页面</div><div class="line">	            CloseableHttpResponse r = closeableHttpClient.execute(g);</div><div class="line">	            System.out.println(EntityUtils.toString(r.getEntity()));</div><div class="line"></div><div class="line">//	            System.out.println(EntityUtils.toString(httpResponse.getEntity()));</div><div class="line">	            //如果模拟登录成功</div><div class="line">//	            if(httpResponse.getStatusLine().getStatusCode() == 200) &#123;</div><div class="line">//	            	HttpGet httpGet = new HttpGet(&quot;http://www.yqrb.cn/html/2017-08/10/content_342754.htm&quot;);</div><div class="line">//	            	httpResponse = closeableHttpClient.execute(httpGet);</div><div class="line">////	                Header[] headers = httpResponse1.getAllHeaders();</div><div class="line">////	                for (Header header : headers) &#123;</div><div class="line">////	                    System.out.println(header.getName() + &quot;: &quot; + header.getValue());</div><div class="line">////	                &#125;</div><div class="line">//	            	System.out.println(EntityUtils.toString(httpResponse.getEntity()));</div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p><strong>重点</strong>:<code>//创建参数列表
            List&lt;NameValuePair&gt; valuePairs = new LinkedList&lt;NameValuePair&gt;();</code>Post数据要写全</p>
<pre><code>    ``//将参数进行封装，提交到服务器端
UrlEncodedFormEntity entity = new UrlEncodedFormEntity(valuePairs, Consts.UTF_8);
        httpPost.setEntity(entity);
closeableHttpClient.execute(httpPost);//执行登录
``
</code></pre><p>注释写的还是比较清楚的,纪录收藏下吧.</p>
<blockquote>
<p>ps:脑仁疼  不过终于搞定啦 哈哈哈哈哈 ╭(●｀∀´●)╯╰(●’◡’●)╮ (●’◡’●)ﾉ ヾ(<em>´▽‘</em>)ﾉ</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[模拟登录(Cookie)]]></title>
      <url>http://yoursite.com/2017/08/09/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>很多网站需要登录才能看到具体内容,所以需要模拟表头登录后抓取<br>模拟Cookie登录抓取内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import org.apache.http.client.ClientProtocolException;</div><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.impl.client.HttpClients;</div><div class="line">import org.apache.http.util.EntityUtils;</div><div class="line"></div><div class="line">public class Aifou &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		CloseableHttpClient closeableHttpClient = HttpClients.createDefault();</div><div class="line">		HttpGet httpGet = new HttpGet(&quot;http://www.aifou.cn&quot;);</div><div class="line"></div><div class="line">		httpGet.setHeader(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,&quot; + &quot;application/xml;q=0.9,image/webp,*/*;q=0.8&quot;);</div><div class="line">		httpGet.setHeader(&quot;Accept-Encoding&quot;, &quot;gzip, deflate, sdch, br&quot;);</div><div class="line">		httpGet.setHeader(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.8&quot;);</div><div class="line">		// 重点在Cookie 通过登录成功后的页面控制台复制cookie即可</div><div class="line">		httpGet.setHeader(&quot;Cookie&quot;, &quot;&quot;);</div><div class="line">		httpGet.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36&quot;</div><div class="line">				+ &quot; (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;);</div><div class="line">		try &#123;</div><div class="line">			// 客户端执行httpGet方法，返回响应</div><div class="line">			CloseableHttpResponse closeableHttpResponse = closeableHttpClient.execute(httpGet);</div><div class="line"></div><div class="line">			// 得到服务响应状态码</div><div class="line">			if (closeableHttpResponse.getStatusLine().getStatusCode() == 200) &#123;</div><div class="line">				// 得到响应实体</div><div class="line">				String entity = EntityUtils.toString(closeableHttpResponse.getEntity(), &quot;utf-8&quot;);</div><div class="line">				System.out.println(entity);</div><div class="line">			&#125; else &#123;</div><div class="line">			&#125;</div><div class="line">		&#125; catch (ClientProtocolException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/Cookie.png" alt="“Cookie”"><br>重点为Cookie的信息,需要注意的是Cookie会过期,过期的话就会失败</p>
]]></content>
      
        <categories>
            
            <category> Java爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HttpClient基本使用]]></title>
      <url>http://yoursite.com/2017/08/07/HttpClient%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>做了一个月爬虫了,从头整理下吧,方便以后查询使用.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.impl.client.HttpClients;</div><div class="line"></div><div class="line">public class HttpClientDemo &#123;</div><div class="line">	public static void main(String[] args) throws Exception &#123;</div><div class="line">		// 创建默认的客户端实例</div><div class="line">		CloseableHttpClient httpClient = HttpClients.createDefault();</div><div class="line"></div><div class="line">		// 创建get请求实例</div><div class="line">		HttpGet httpget = new HttpGet(&quot;http://www.baidu.com&quot;);</div><div class="line"></div><div class="line">		System.out.println(&quot;executing request &quot; + httpget.getURI());</div><div class="line">		try &#123;</div><div class="line">			// 客户端执行get请求 返回响应</div><div class="line">			CloseableHttpResponse response = httpClient.execute(httpget);</div><div class="line"></div><div class="line">			// 服务器响应状态行</div><div class="line">			System.out.println(response.getStatusLine().toString());</div><div class="line"></div><div class="line"></div><div class="line">		&#125; finally &#123;</div><div class="line">			httpClient.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单理解下:<br><code>CloseableHttpClient httpClient = HttpClients.createDefault();</code></p>
<p>上述代码我们可以理解为我先打开了一个“浏览器”，注意，并不是真正意义上的浏览器，只是进行了这步操作，表明我们马上就可以访问网页了。</p>
<p><code>HttpGet httpget = new HttpGet(&quot;http://www.baidu.com&quot;);</code></p>
<p>上述代码就表示了我们请求了一个页面，用的是get方法，对于请求页面使用的是哪一种方法，一般来说，只有在进行登录页面的时，我们会使用Post方法。我们可以通过chrome开发者工具来了解对于这个页面是使用了哪个方法。</p>
<p>我们理解为上面两个步骤就是打开一个浏览器，然后在地址栏输入了一个网址。</p>
<p><code>CloseableHttpResponse response = httpClient.execute(httpget);</code><br>上述代码相当于我们此时在浏览器中按下了回车，URL资源所在的服务器就会开始给你返回这个网页的数据。包括请求头，消息实体等等.最后在finally释放资源.</p>
<p><a href="http://hc.apache.org/downloads.cgi" target="_blank" rel="external">HttpClient jar下载</a><br>参考自:<a href="http://www.cnblogs.com/icedream61/p/4887250.html" target="_blank" rel="external">Hg_Yi</a></p>
]]></content>
      
        <categories>
            
            <category> Java爬虫 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[消愁]]></title>
      <url>http://yoursite.com/2017/08/03/%E6%B6%88%E6%84%81/</url>
      <content type="html"><![CDATA[<p><img src="/images/xiaochou.png" alt="“消愁”"></p>
<p><center> 当你走进这欢乐场<br>背上所有的梦与想<br>各色的脸上各色的妆<br>没人记得你的模样<br>三巡酒过你在角落<br>固执的唱着苦涩的歌<br>听他在喧嚣里被淹没<br>你拿起酒杯对自己说<br><strong>一杯敬朝阳，一杯敬月光</strong><br>唤醒我的向往，温柔了寒窗<br>于是可以不回头的逆风飞翔<br>不怕心头有雨，眼底有霜<br><strong>一杯敬故乡，一杯敬远方</strong><br>守着我的善良，催着我成长<br>所以南北的路从此不再漫长<br>灵魂不再无处安放<br><strong>一杯敬明天，一杯敬过往</strong><br>支撑我的身体，厚重了肩膀<br>虽然从不相信所谓山高水长<br>人生苦短何必念念不忘<br><strong>一杯敬自由，一杯敬死亡</strong><br>宽恕我的平凡，驱散了迷惘<br>好吧天亮之后总是潦草离场<br>清醒的人最荒唐<br>好吧天亮之后总是潦草离场<br>清醒的人最荒唐<br>—— 毛不易<br><a href="https://i.y.qq.com/v8/playsong.html?songid=203451421&amp;source=yqq#wechat_redirect" target="_blank" rel="external">消愁-QQ音乐</a></center></p>
<p></p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[碎碎念]]></title>
      <url>http://yoursite.com/2017/07/29/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>广厦万间,夜眠八尺.<br>珍馐百味,不过一饱.</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git从零开始]]></title>
      <url>http://yoursite.com/2017/07/26/Git%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>从头整理下Git流程</code></p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>安装Git后,创建仓库目录文件夹,打开命令行输入<code>ssh-keygen -t rsa -C &quot;邮箱名&quot;</code> 创建SSH密钥。</li>
<li>在GitHub账号设置中添加SSH许可。</li>
<li><code>ssh -T git@github.com</code>连接GitHub</li>
<li>修改个人信息  <code>git config --global user.name &quot;名字&quot;</code>  <code>git config --global user.email &quot;邮箱&quot;</code><a id="more"></a>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2></li>
<li><code>git init</code>  初始化本地仓库</li>
<li><code>git clone url</code>  下载远程Github仓库,url为github clone链接</li>
<li>基本操作:  <ul>
<li><code>git add file_name</code> 将文件添加到缓存.  <code>*</code>为全部文件</li>
<li><code>git status</code> 查看项目当前状态  <code>git status -s</code>获得简短输出</li>
<li><code>git diff</code>查看已写入缓存与已修改但尚未写入缓存的改动的区别. 例如修改了文件里的内容后,<code>git status</code> 显示你上次提交更新后的更改或者写入缓存的改动， 而 <code>git diff</code> 一行一行地显示这些改动具体是啥。</li>
<li><code>git commit</code>将缓存区内容添加到仓库中.<code>git commit -m &quot;注释&quot;</code>可以简单说明改动.</li>
<li><code>git rm file</code>将条目从缓存区删除,包括文件本身.如果要在工作目录中保留文件用 <code>git rm --cached</code> </li>
<li><code>git mv</code> 命令用于移动或重命名一个文件、目录、软连接。</li>
</ul>
</li>
<li>分支管理:  <ul>
<li><code>git branch (branchname)</code>创建一个新的分支</li>
<li><code>git checkout</code> 切换分支,在切换分支时会用该分支最后提交的快照替换工作目录的内容,所以多个分支不需要多个目录.</li>
<li><code>git branch</code>列出本地分支,<code>*</code>为当前所在分支</li>
<li><code>git branch -d (branchname)</code>删除分支</li>
<li><code>git merge branchname</code>合并分支内容</li>
</ul>
</li>
<li>查看提交历史<ul>
<li><code>git log</code>查看历史信息,可以用<code>git log --oneline</code>查看简明信息</li>
</ul>
</li>
</ol>
<h2 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h2><ol>
<li>创建本地仓库目录文件夹</li>
<li>创建GitHub远程仓库,<code>git clone url</code>克隆到本地 </li>
<li><code>git init</code>                               # 初始化</li>
<li><code>git add README.md</code>                    # 添加文件</li>
<li><code>git commit -m &quot;添加注释信息&quot;</code>       # 提交并备注信息</li>
<li><code>git push</code>提交到远程仓库<br><br></li>
</ol>
<p><code>ps.只是最最最基础的流程,分支慢慢研究了.</code><br><br></p>
<p>##最后<br>会随着看的越来越多慢慢更新的,先熟悉下.<br>贴两个链接:</p>
<blockquote>
<p><a href="http://www.cnblogs.com/icedream61/p/4887250.html" target="_blank" rel="external">简单命令加流程</a><br><a href="http://www.runoob.com/w3cnote/git-guide.html" target="_blank" rel="external">GitHub简明教程</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-单例模式（饿汉模式or懒汉模式）]]></title>
      <url>http://yoursite.com/2017/06/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%A5%BF%E6%B1%89%E6%A8%A1%E5%BC%8For%E6%87%92%E6%B1%89%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在从头研究项目的时候发现存储配置文件字段用到了饿汗单例模式，深入研究看看。</p>
</blockquote>
<p>##单例模式<br>单例模式就是在应用程序中只创建一个该类的对象。<br>这个设计模式主要目的是想在整个系统中只能出现一个类的实例。比如你的软件的<strong>全局配置信息</strong>，或者是一个Factory，或是一个主控类，等等。你希望这个类在整个系统中只能出现一个实例。当然，作为一个技术负责人的你，你当然有权利通过使用非技术的手段来达到你的目的。比如：你在团队内部明文规定，“XX类只能有一个全局实例，如果某人使用两次以上，那么该人将被处于2000元的罚款！”（呵呵），你当然有权这么做。但是如果你的设计的是东西是一个类库，或是一个需要提供给用户使用的API，恐怕你的这项规定将会失效。因为，你无权要求别人会那么做。所以，这就是为什么，我们希望通过使用技术的手段来达成这样一个目的的原因。<br><a id="more"></a></p>
<p>###饿汉模式和懒汉模式</p>
<blockquote>
<p>饿汉 类加载时候就已经完成了初始化，不需要同步<br>懒汉 类加载的时候不初始化，需要同步 </p>
</blockquote>
<p><strong>懒汉模式</strong>：类加载时不初始化，因此在类加载时速度快，但运行时获取对象的速度慢。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton singleton = null;  </div><div class="line">    private Singleton() &#123;  &#125;                    //私有的构造函数，表明这个类不可能形成实例。</div><div class="line">    public static Singleton getInstance() &#123;     //借助getInstance()让其形成实例。</div><div class="line">        if (singleton== null) &#123;</div><div class="line">            singleton= new Singleton();</div><div class="line">        &#125;</div><div class="line">        return singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：</p>
<ol>
<li>即然这个类是不可能形成实例，那么，我们需要一个静态的方式让其形成实例：getInstance()。注意这个方法是在new自己，因为其可以访问私有的构造函数，所以他是可以保证实例被创建出来的。</li>
<li>在getInstance()中，先做判断是否已形成实例，如果已形成则直接返回，否则创建实例。</li>
<li>取实例时，只需要使用Singleton.getInstance()就行了。</li>
</ol>
<p><strong>饿汉模式</strong>：在类加载时就完成了初始化，所以类加载较慢，但获取对象的速度快<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class EagerSingleton &#123;</div><div class="line"></div><div class="line">    private static EagerSingleton instance = new EagerSingleton();//静态私有成员，已初始化</div><div class="line">    </div><div class="line">    private EagerSingleton() </div><div class="line">    &#123;</div><div class="line">        //私有构造函数</div><div class="line">    &#125;</div><div class="line">    //静态，不用同步（类加载时已初始化，不会有多线程的问题）</div><div class="line">    public static EagerSingleton getInstance()    &#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##单例模式的多线程<br>多线程：双重检查<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Singleton</div><div class="line">&#123;</div><div class="line">    private volatile static Singleton singleton = null;</div><div class="line">    private Singleton()  &#123;    &#125;</div><div class="line">    public static Singleton getInstance()   &#123;</div><div class="line">        if (singleton== null)  &#123;</div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (singleton== null)  &#123;</div><div class="line">                    singleton= new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>第一个条件判断实例是否已经创建,如果创建了则不需要同步,直接返回就好,否则开始同步线程.</li>
<li>第二个条件判断,如果被同步的线程中,有一个线程创建了对象,那么别的线程就不用再创建了.</li>
</ol>
<p><strong>注意:此处volatile的作用</strong></p>
<ol>
<li>这个变量不会在多个线程中存在复本，直接从内存读取。</li>
<li>这个关键字会禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。</li>
</ol>
<p>还有一种《Effective Java》推荐方式<code>静态内部类</code>的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;  </div><div class="line">    private static class SingletonHolder &#123;  </div><div class="line">        private static final Singleton INSTANCE = new Singleton();  </div><div class="line">    &#125;  </div><div class="line">    private Singleton ()&#123;&#125;  </div><div class="line">    public static final Singleton getInstance() &#123;  </div><div class="line">        return SingletonHolder.INSTANCE; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p>
<p>小结：<br>静态内部类还是不太懂，后续慢慢思考一下。</p>
<p>参考资料：<br>深入浅出单实例SINGLETON设计模式  <a href="http://coolshell.cn/articles/265.html" target="_blank" rel="external">http://coolshell.cn/articles/265.html</a><br>如何正确地写出单例模式         <a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="external">http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/</a>     </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线程与进程简单理解]]></title>
      <url>http://yoursite.com/2017/05/09/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>由于线程和进程比较抽象，不好理解，看到篇文章，简单记录下，方便理解。</p>
<ol>
<li>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</li>
<li>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，<strong>单个CPU一次只能运行一个任务</strong>。<a id="more"></a></li>
<li>进程就像工厂的车间，它代表CPU所能处理的单个任务。车间可以有很多个，<strong>任一时刻，CPU总是运行一个进程，其他进程处于非运行状态</strong>。</li>
<li>一个车间里，可以有很多工人。他们协同完成一个任务。线程就好比车间里的工人。一个进程可以包括多个线程。</li>
<li>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。<strong>这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</strong></li>
<li>可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表<strong>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</strong></li>
<li>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫<strong>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</strong>。</li>
<li>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。<strong>这好比某些内存区域，只能供给固定数目的线程使用</strong>。</li>
<li>这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<strong>“信号量”（Semaphore），用来保证多个线程不会互相冲突。</strong><br>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，<strong>因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</strong></li>
</ol>
<p>总结：<br>操作系统的设计，因此可以归结为三点：<br>（1）以多进程形式，允许多个任务同时运行；<br>（2）以多线程形式，允许单个任务分成不同的部分运行；<br>（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</p>
]]></content>
      
        <categories>
            
            <category> 底层机制 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 底层机制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 中的序列化]]></title>
      <url>http://yoursite.com/2017/04/19/java%20%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="序列化是干什么的？"><a href="#序列化是干什么的？" class="headerlink" title="序列化是干什么的？"></a>序列化是干什么的？</h3><p> 简单说就是为了保存在内存中的各种对象的状态，并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存Object States，但是Java给你提供一种应该比你自己好的保存对象状态的机制,那就是序列化。</p>
<h3 id="什么情况下需要序列化"><a href="#什么情况下需要序列化" class="headerlink" title="什么情况下需要序列化"></a>什么情况下需要序列化</h3><p>1.当你想把的内存中的对象保存到一个文件中或者数据库中时候；<br>2.当你想用套接字在网络上传送对象的时候；<br>3.当你想通过RMI传输对象的时候；</p>
<a id="more"></a>
<h3 id="当对一个对象实现序列化时，究竟发生了什么？"><a href="#当对一个对象实现序列化时，究竟发生了什么？" class="headerlink" title="当对一个对象实现序列化时，究竟发生了什么？"></a>当对一个对象实现序列化时，究竟发生了什么？</h3><p>在没有序列化前，每个保存在堆（Heap）中的对象都有相应的状态（state），即实例变量（instance ariable）比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Foo myFoo = new Foo(); </div><div class="line">myFoo .setWidth(37); </div><div class="line">myFoo.setHeight(70);</div></pre></td></tr></table></figure></p>
<p> 当通过下面的代码序列化之后，MyFoo对象中的width和Height实例变量的值（37，70）都被保存到foo.ser文件中，这样以后又可以把它 从文件中读出来，重新在堆中创建原来的对象。当然保存时候不仅仅是保存对象的实例变量的值，JVM还要保存一些小量信息，比如类的类型等以便恢复原来的对象。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FileOutputStream fs = new FileOutputStream(&quot;foo.ser&quot;);</div><div class="line">ObjectOutputStream os = new ObjectOutputStream(fs); </div><div class="line">os.writeObject(myFoo);</div></pre></td></tr></table></figure></p>
<h3 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import java.io.*; </div><div class="line"></div><div class="line">public class Box implements Serializable </div><div class="line">&#123; </div><div class="line">private int width; </div><div class="line">private int height; </div><div class="line"></div><div class="line">public void setWidth(int width)&#123; </div><div class="line">this.width = width; </div><div class="line">&#125; </div><div class="line"></div><div class="line">public void setHeight(int height)&#123; </div><div class="line">this.height = height; </div><div class="line">&#125; </div><div class="line"></div><div class="line">public static void main(String[] args)&#123; </div><div class="line">Box myBox = new Box(); </div><div class="line">myBox.setWidth(50); </div><div class="line">myBox.setHeight(30); </div><div class="line"></div><div class="line">try&#123; </div><div class="line">FileOutputStream fs = new FileOutputStream(&quot;foo.ser&quot;); </div><div class="line">ObjectOutputStream os = new ObjectOutputStream(fs); </div><div class="line">os.writeObject(myBox); </div><div class="line">os.close(); </div><div class="line">&#125;catch(Exception ex)&#123; </div><div class="line">ex.printStackTrace(); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="相关注意事项"><a href="#相关注意事项" class="headerlink" title="相关注意事项"></a>相关注意事项</h3><p>1.当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；<br>2.当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；<br>3.并非所有的对象都可以序列化。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>就像你寄一箱饼干，因为体积太大，就全压成粉末紧紧地一包寄出去，这就是序列化的作用。<br>只不过JAVA的序列化是可以完全还原的。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[接口详解]]></title>
      <url>http://yoursite.com/2017/04/08/%E6%8E%A5%E5%8F%A3%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="接口详解"><a href="#接口详解" class="headerlink" title="接口详解"></a>接口详解</h1><hr>
<h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><p>类是一种具体实现体，而接口定义了一种规范，接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心类里的实现细节，只规定了这批类里必须提供某些方法。</p>
<blockquote>
<p>可见，接口不提供任何实现方法。接口体现的是规范和实现分离的哲学。</p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="接口定义注意事项"><a href="#接口定义注意事项" class="headerlink" title="接口定义注意事项"></a>接口定义注意事项</h3><ul>
<li>接口可以有多个直接父接口，支持多继承，但接口只能继承接口，不能继承类。</li>
<li>接口里不能包含构造器和初始化块定义。接口里可以包含成员变量（只能是静态常量）、方法（只能是抽象实例方法、类方法或默认方法）、内部类（包括内部接口、枚举）。</li>
<li>系统自动为接口里定义的成员变量增加<code>public static final</code>修饰符。</li>
</ul>
<hr>
<h3 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h3><p>接口的主要用途：</p>
<ol>
<li>定义变量，也可用于强制类型转换。</li>
<li>调用接口中定义的常量</li>
<li>被其他类实现</li>
</ol>
<hr>
<h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p>设计目的上的差别:<br>接口体现的是一种规范，是多个模块间的耦合标准。接口类似于整个系统的“总纲”，因此，接口不应该经常被改写。<br>抽象类则不一样，体现的是一种模板式设计。可以在后期更加完善。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[疯狂JAVA摘句]]></title>
      <url>http://yoursite.com/2017/03/20/%E7%96%AF%E7%8B%82JAVA%E6%91%98%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>真正优秀的程序员当然可以使用IDE工具，但真正的程序员，即使使用vi、记事本也一样可以完成非常优秀的项目。<br>正确对待IDE工具的态度是：可以使用IDE工具，但绝不可依赖IDE工具。<br>学习阶段，前期不要使用IDE工具；开发阶段，使用IDE工具。<br>真正技术掌握了，无论用什么IDE工具都得心应手。</p>
<blockquote>
<p>对于IDE工具，业内有一个说法：IDE工具会加快高手的开发效率，但会使初学者更白痴。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 摘句 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 摘句 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git命令实践]]></title>
      <url>http://yoursite.com/2017/03/19/Git%E5%91%BD%E4%BB%A4%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="Git入门"><a href="#Git入门" class="headerlink" title="Git入门"></a>Git入门</h1><p>标签（空格分隔）： 基本操作</p>
<hr>
<h3 id="git-init-–-初始化仓库"><a href="#git-init-–-初始化仓库" class="headerlink" title="git init – 初始化仓库"></a>git init – 初始化仓库</h3><p>使用Git仓库管理必须先初始化仓库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir Git-first</div><div class="line">cd Git-first</div><div class="line">git init</div><div class="line">Initialized empty Git repository in /Volumes/CODE/Git-tutorial/.git/</div></pre></td></tr></table></figure></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="git-status-–-查看仓库状态"><a href="#git-status-–-查看仓库状态" class="headerlink" title="git status – 查看仓库状态"></a>git status – 查看仓库状态</h3><p>git status查看仓库状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</div></pre></td></tr></table></figure></p>
<p>提示显示正处在: <code>master</code>分支处，且没有任何文件。<br>创建第一个文件<code>READEME.md</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$touch READE.md</div><div class="line"></div><div class="line">$Git-tutorial ZH$ git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">	READE.md</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div></pre></td></tr></table></figure></p>
<p>可以在<code>Untracked files：</code>中看到这个文件，且并没有添加到暂存区</p>
<hr>
<h3 id="git-add-–-向暂存区添加文件"><a href="#git-add-–-向暂存区添加文件" class="headerlink" title="git add – 向暂存区添加文件"></a>git add – 向暂存区添加文件</h3><p>要想让文件成为Git仓库管理的对象，需要用<code>git add</code>命令添加到暂存区。暂存区是提交前的一个临时区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git add README.md </div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">	new file:   README.md</div></pre></td></tr></table></figure></p>
<p>可以看到<code>READEME.md</code>文件显示在<code>Changes to be committed</code>中了。</p>
<hr>
<h3 id="git-commit-–-保存仓库的历史记录"><a href="#git-commit-–-保存仓库的历史记录" class="headerlink" title="git commit – 保存仓库的历史记录"></a>git commit – 保存仓库的历史记录</h3><p><code>git commit</code>将当前暂存区中的文件实际保存到仓库的历史记录中。</p>
<ul>
<li>记叙一行提交信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &quot;First Commit&quot;</div><div class="line">[master (root-commit) a6ce11d] First Commit</div><div class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 README.md</div></pre></td></tr></table></figure>
</li>
</ul>
<p>-m参数后的“First Commit”成为提交信息，是对这个提交的描述。</p>
<ul>
<li>记叙详细提交信息</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
